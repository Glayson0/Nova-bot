import telebot # Biblioteca pyTelegramBotAPI para acessar a API do bot do Telegram
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from datetime import datetime
from localidadesBandejao import *
from timeUtils import *
from bus import *

# Fazer conex√£o com a API do bot do Telegram
CHAVE_API = "7141300367:AAHBHEelfnAig53EVxqq0oabZrRz15CjIJ8"
bot = telebot.TeleBot(CHAVE_API, parse_mode='MarkdownV2')

"""
NOTAS:
- O par√¢metro "messagem" √© um objeto mensagem enviada pelo usu√°rio;
- Todas as fun√ß√µes podem ser chamadas a qualquer momento no chat pelos seus respectivos comandos;
- H√° uma hierarquia vertical para a chamada das fun√ß√µes que t√™m o message_handler. Ou seja, por exemplo: se houver mais de uma fun√ß√£o 
com o mesmo trigger, apenas aquela que est√° mais acima ser√° ativada.

"""

### Comandos intermedi√°rios: apenas auxiliam o usu√°rio a chegarem √†s funcionalidades do bot

## Geral

# Comando /start
@bot.message_handler(commands=["start"]) # Atribui√ß√£o do comando /start √† fun√ß√£o
def start(mensagem):

    """
    Essa fun√ß√£o
    - envia uma mensagem de introdu√ß√£o ao bot no chat, indicando o usu√°rio a utilizar o comando /help.
    """

    # Texto da mensagem do bot
    startMessage = f"""
Eu me chamo Nova e sou um bot criado por alunos da Unicamp\!

Meu objetivo √© fornecer informa√ß√µes dos √¥nibus da moradia e dos restaurantes da Unicamp de forma r√°pida e f√°cil\.

Clique no bot√£o abaixo ou digite /help para conhecer alguns dos comandos que voc√™ pode utilizar\.
"""
    
    # Bot√µes
    startButton = ReplyKeyboardMarkup(resize_keyboard=True)  # Cria√ß√£o

    startButton.add(KeyboardButton('/help'))

    # Envio de mensagem
    bot.send_message(mensagem.chat.id, f'üëã Ol√°, {mensagem.chat.first_name}\! Como vai?')
    bot.send_message(mensagem.chat.id, startMessage, reply_markup=startButton)

# Comando /help
@bot.message_handler(commands=["help"])  # Atribui√ß√£o do comando /help √† fun√ß√£o
def help(mensagem):

    """
    Essa fun√ß√£o
    - envia uma mensagem no chat com 3 comandos principais para ajudar o usu√°rio.
    """

    # Texto da mensagem do bot
    menuDescription = """
\- /onibus: Ver comandos para os √¥nibus da moradia

\- /bandejao: Ver os comandos para o bandejao

\- /tudo: Listar todos os comandos
"""  

    # Bot√µes
    menuButtons = ReplyKeyboardMarkup(resize_keyboard=True) # Cria√ß√£o

    menuButtons.add(KeyboardButton('/onibus'))
    menuButtons.add(KeyboardButton('/bandejao'))
    menuButtons.add(KeyboardButton('/tudo'))

    # Envio de mensagem
    bot.reply_to(mensagem, 'Entendido\! Aqui est√° uma lista com os comandos principais:')
    bot.send_message(mensagem.chat.id, menuDescription, reply_markup=menuButtons)

# Comando /onibus
@bot.message_handler(commands=["onibus"]) # Atribui√ß√£o do comando /√¥nibus √† fun√ß√£o
def onibus(mensagem):

    """
    Essa fun√ß√£o
    - envia uma mensagem no chat listando todos os comandos relacionados com os √¥nibus da moradia.
    """

    # Texto da mensagem do bot
    onibusDescription = """
\- /oProx: Ver os pr√≥ximos 2 √¥nibus de ida e de volta

\- /oTodos: Ver foto com todos os hor√°rios de √¥nibus

\- /oTodosIda: Ver todos os hor√°rios de √¥nibus de IDA do dia \(Moradia \-\> Unicamp\)

\- /oTodosVolta: Ver todos os hor√°rios de √¥nibus de VOLTA dia \(Unicamp \-\> Moradia\)
"""
    # Bot√µes
    busButtons = ReplyKeyboardMarkup(resize_keyboard=True) # Cria√ß√£o

    busButtons.add(KeyboardButton('/oProx'))
    busButtons.add(KeyboardButton('/oTodos'))
    busButtons.add(KeyboardButton('/oTodosIda'))
    busButtons.add(KeyboardButton('/oTodosVolta'))

    # Envio de mensagem
    bot.reply_to(mensagem, 'Okay\! Aqui est√£o os comandos para os √¥nibus da moradia:')
    bot.send_message(mensagem.chat.id, onibusDescription, reply_markup=busButtons)

# Comando /bandej√£o
@bot.message_handler(commands=["bandejao"]) # Atribui√ß√£o do comando /bandejao √† fun√ß√£o
def bandejao(mensagem):

    """
    Essa fun√ß√£o
    - envia uma mensagem no chat listando todos os comandos relacionados com os restaurantes da Unicamp.
    """

    # Texdo da mensagem do bot
    bandejaoDescription = """
Geral
\- /bHoras: Ver os hor√°rios dos tr√™s restaurantes

\- /bCardapio: Ver o card√°pio de almo√ßo e jantar

\- /bJaPode: Ver refei√ß√µes em andamento

Restaurantes
\- /ru: Ver informa√ß√µes do RU

\- /rs: Ver informa√ß√µes do RS

\- /ra: Ver informa√ß√µes do RA
"""

    # Bot√µes
    bandejaoButtons = ReplyKeyboardMarkup(resize_keyboard=True) # Cria√ß√£o
    bandejaoButtons.add(KeyboardButton('/bHoras'), KeyboardButton('/bCardapio'), KeyboardButton('/bJaPode'))
    bandejaoButtons.add(KeyboardButton('/ru'), KeyboardButton('/rs'), KeyboardButton('/ra'))

    # Envio de mensagem
    bot.reply_to(mensagem, 'Certo\! Aqui est√£o os comandos para o bandej√£o:')
    bot.send_message(mensagem.chat.id, bandejaoDescription, reply_markup=bandejaoButtons)

# Comando /bCardapio
@bot.message_handler(commands=["bCardapio"]) # Atribui√ß√£o do comando /bCardapio √† fun√ß√£o
def bCardapio(mensagem):

    """
    Essa fun√ß√£o envia uma mensagem no chat com as op√ß√µes de card√°pio (Tradicional e Vegano) para o usu√°rio escolher.
    """
    
    # Texto da mensagem do bot
    dietMenuDescription = """
\- /bTradicional: Card√°pio tradicional

\- /bVegano: Card√°pio vegano
"""

    # Bot√µes
    dietButtons = ReplyKeyboardMarkup(resize_keyboard=True) # Cria√ß√£o
    dietButtons.add(KeyboardButton('/bTradicional'))
    dietButtons.add(KeyboardButton('/bVegano'))

    # Envio de mensagem
    bot.reply_to(mensagem, 'Ta bom\! Qual card√°pio deseja ver?')
    bot.send_message(mensagem.chat.id, dietMenuDescription, reply_markup=dietButtons)




### Comandos de funcionalidades: as funcionalidades de fato do bot

## √înibus

# Comando /oTodos
@bot.message_handler(commands=["oTodos"]) # Atribui√ß√£o do comando /oTodos √† fun√ß√£o
def oTodos(mensagem):

    """
    Essa fun√ß√£o envia uma foto no chat da tabela de hor√°rios dos √¥nibus da moradia
    """

    tabelaHorariosOnibus = 'https://i.pinimg.com/736x/8f/72/57/8f7257a0d878b4ce78543183ace8acf1.jpg' # URL da foto em um perfil do Pinterest

    # Envio de mensagem
    bot.send_message(mensagem.chat.id, 'Aqui est√° a foto com todos os hor√°rios dos √¥nibus da moradia:')
    bot.send_photo(mensagem.chat.id, tabelaHorariosOnibus)

# Comando /oProx
@bot.message_handler(commands=["oProx"]) # Atribui√ß√£o do comando /oProx √† fun√ß√£o
def oProx(mensagem):
    """
    Essa fun√ß√£o:
    - Pega o hor√°rio dos pr√≥ximos 2 √¥nibus de ida e volta cada com a fun√ß√£o nextBus();
    - Calcula a diferen√ßa de tempo entre o hor√°rio atual e o pr√≥ximo √¥nibus encontrado;
    - Envia uma mensagem com os hor√°rios dos pr√≥ximos 2 √¥nibus de ida e volta cada e o tempo faltante.
    """

    # Obten√ß√£o do tempo atual a partir da mensagem
    horaAtual = datetime.fromtimestamp(mensagem.date)
    diaAtual = getCurrentDay(mensagem)

    # Obten√ß√£o dos hor√°rios dos √¥nibus
    horarioOnibusIda1, horarioOnibusVolta1 = nextBus(horaAtual, diaAtual)

    horarioOnibusIda2, horarioOnibusVolta2 = nextBusFromBus(horarioOnibusIda1, horarioOnibusVolta1, diaAtual)


    ## Diferen√ßa de tempo
        # Ida
    if horarioOnibusIda1 != None:
        diffHorariosIda1 = getTimeDifference2(horarioOnibusIda1, horaAtual)
    else:
        diffHorariosIda1 = None

    if horarioOnibusIda2 != None:
        diffHorariosIda2 = getTimeDifference2(horarioOnibusIda2, horaAtual)
    else:
        diffHorariosIda2 = None

        # Volta
    if horarioOnibusVolta1 != None:
        diffHorariosVolta1 = getTimeDifference2(horarioOnibusVolta1, horaAtual)
    else:
        diffHorariosVolta1 = None

    if horarioOnibusVolta2 != None:
        diffHorariosVolta2 = getTimeDifference2(horarioOnibusVolta2, horaAtual)
    else:
        diffHorariosVolta2 = None

    ## Texto de tempo faltante para cada √¥nibus
        # Ida
    tempo_ProxOnibusIda1 = formatingBusDiffTime(horarioOnibusIda1, diffHorariosIda1)
    tempo_ProxOnibusIda2 = formatingBusDiffTime(horarioOnibusIda2, diffHorariosIda2)
        # Volta
    tempo_ProxOnibusVolta1 = formatingBusDiffTime(horarioOnibusVolta1, diffHorariosVolta1)
    tempo_ProxOnibusVolta2 = formatingBusDiffTime(horarioOnibusVolta2, diffHorariosVolta2)

    ##  Texto do hor√°rio de cada √¥nibus
        # Ida
    if horarioOnibusIda1 == None:
        output_ProxOnibusIda1 = f"""Acabaram os √¥nibus por hoje"""
    else:
        output_ProxOnibusIda1 = f"""{horarioOnibusIda1} \({tempo_ProxOnibusIda1}\)"""

    if horarioOnibusIda2 == None:
        output_ProxOnibusIda2 = f"""Acabaram os √¥nibus por hoje"""
    else:
        output_ProxOnibusIda2 = f"""{horarioOnibusIda2} \({tempo_ProxOnibusIda2}\)"""
        # Volta
    if horarioOnibusVolta1 == None:
        output_ProxOnibusVolta1 = f"""Acabaram os √¥nibus por hoje"""
    else:
        output_ProxOnibusVolta1 = f"""{horarioOnibusVolta1} \({tempo_ProxOnibusVolta1}\)"""

    if horarioOnibusVolta2 == None:
        output_ProxOnibusVolta2 = f"""Acabaram os √¥nibus por hoje"""
    else:
        output_ProxOnibusVolta2 = f"""{horarioOnibusVolta2} \({tempo_ProxOnibusVolta2}\)"""

    # Texto da mensagem do bot
    proxOnibus = f"""
Ida \(Moradia \-\> Unicamp\):
01\) {output_ProxOnibusIda1}
02\) {output_ProxOnibusIda2}

Volta \(Unicamp \-\> Moradia\):
01\) {output_ProxOnibusVolta1}
02\) {output_ProxOnibusVolta2}
"""
    # Envio da mensagem no chat
    bot.reply_to(mensagem, "Claro\! Aqui est√£o os hor√°rios dos pr√≥ximos √¥nibus da moradia:")
    bot.send_message(mensagem.chat.id, proxOnibus)

# oTodosIda
@bot.message_handler(commands=["oTodosIda"]) # Atribui√ß√£o do comando /oTodosIda √† fun√ß√£o
def oTodosIda(message):

    """
    Essa fun√ß√£o envia uma mensagem no chat com uma lista de 3 colunas com
        - os hor√°rios de √¥nibus de Ida que j√° passaram tachados
        - o hor√°rio do pr√≥ximo √¥nibus de Ida em negrito
        - os hor√°rios de √¥nibus de Ida que ainda n√£o passaram
    """
    
    # Obten√ß√£o do tempo atual a partir da mensagem
    horaAtual = datetime.fromtimestamp(message.date)
    diaAtual = getCurrentDay(message)

    # Obten√ß√£o do hor√°rio do pr√≥ximo √¥nibus
    proxOnibus = nextBus(horaAtual, diaAtual, 0)

    ### Lista com todos os hor√°rios de Ida

    pos = 0

    ## Texto da mensagem do bot
    horariosIda = ""

    # Dia √∫til
    if diaAtual in 'Segunda Ter√ßa Quarta Quinta Sexta':

        for horario in diaUtil_horariosIda:

            # √înibus que j√° passaram
            if strToTime(horario) < strToTime(proxOnibus): 
                pos += 1
                if pos % 3 == 0:
                    horariosIda += f'~{horario}~\n'
                else:
                    horariosIda += f'~{horario}~  \|  '
            
            # Pr√≥ximo √¥nibus
            elif strToTime(horario) == strToTime(proxOnibus):
                pos += 1
                if pos % 3 == 0:
                    horariosIda += f'*{proxOnibus}*\n'
                else:
                    horariosIda += f'*{proxOnibus}*  \|  '
            
            # √înibus que ainda n√£o passaram
            else:
                pos += 1
                if pos % 3 == 0:
                    horariosIda += f'{horario}\n'
                else:
                    horariosIda += f'{horario}  \|  '
    
    # Dia n√£o-√∫til
    else:

        for horario in diaNaoUtil_horariosIda:

            # √înibus que j√° passaram
            if strToTime(horario) < strToTime(proxOnibus): 
                pos += 1
                if pos % 3 == 0:
                    horariosIda += f'~{horario}~\n'
                else:
                    horariosIda += f'~{horario}~  \|  '
            
            # Pr√≥ximo √¥nibus
            elif strToTime(horario) == strToTime(proxOnibus):
                pos += 1
                if pos % 3 == 0:
                    horariosIda += f'*{proxOnibus}*\n'
                else:
                    horariosIda += f'*{proxOnibus}*  \|  '
            
            # √înibus que ainda n√£o passaram
            else:
                pos += 1
                if pos % 3 == 0:
                    horariosIda += f'{horario}\n'
                else:
                    horariosIda += f'{horario}  \|  '

    # Envio de mensagem
    bot.reply_to(message, 'Ta bom\! Aqui est√° a lista dos √¥nibus de Ida de hoje\!')
    bot.send_message(message.chat.id, horariosIda)

# oTodosVolta
@bot.message_handler(commands=["oTodosVolta"]) # Atribui√ß√£o do comando /oTodosVolta √† fun√ß√£o
def oTodosVolta(message):

    """
    Essa fun√ß√£o envia uma mensagem no chat com uma lista de 3 colunas com
        - os hor√°rios de √¥nibus de Volta que j√° passaram tachados
        - o hor√°rio do pr√≥ximo √¥nibus de Volta em negrito
        - os hor√°rios de √¥nibus de Volta que ainda n√£o passaram
    """
    
    # Obten√ß√£o do tempo atual a partir da mensagem
    horaAtual = datetime.fromtimestamp(message.date)
    diaAtual = getCurrentDay(message)

    # Obten√ß√£o do hor√°rio do pr√≥ximo √¥nibus
    proxOnibus = nextBus(horaAtual, diaAtual, 0)

    ### Lista com todos os hor√°rios de Ida

    pos = 0

    ## Texto da mensagem do bot
    horariosVolta = ""

    # Dia √∫til
    if diaAtual in 'Segunda Ter√ßa Quarta Quinta Sexta':

        for horario in diaUtil_horariosVolta:

            # √înibus que j√° passaram
            if strToTime(horario) < strToTime(proxOnibus): 
                pos += 1
                if pos % 3 == 0:
                    horariosVolta += f'~{horario}~\n'
                else:
                    horariosVolta += f'~{horario}~  \|  '
            
            # Pr√≥ximo √¥nibus
            elif strToTime(horario) == strToTime(proxOnibus):
                pos += 1
                if pos % 3 == 0:
                    horariosVolta += f'*{proxOnibus}*\n'
                else:
                    horariosVolta += f'*{proxOnibus}*  \|  '
            
            # √înibus que ainda n√£o passaram
            else:
                pos += 1
                if pos % 3 == 0:
                    horariosVolta += f'{horario}\n'
                else:
                    horariosVolta += f'{horario}  \|  '
    
    # Dia n√£o-√∫til
    else:

        for horario in diaNaoUtil_horariosIda:

            # √înibus que j√° passaram
            if strToTime(horario) < strToTime(proxOnibus): 
                pos += 1
                if pos % 3 == 0:
                    horariosVolta += f'~{horario}~\n'
                else:
                    horariosVolta += f'~{horario}~  \|  '
            
            # Pr√≥ximo √¥nibus
            elif strToTime(horario) == strToTime(proxOnibus):
                pos += 1
                if pos % 3 == 0:
                    horariosVolta += f'*{proxOnibus}*\n'
                else:
                    horariosVolta += f'*{proxOnibus}*  \|  '
            
            # √înibus que ainda n√£o passaram
            else:
                pos += 1
                if pos % 3 == 0:
                    horariosVolta += f'{horario}\n'
                else:
                    horariosVolta += f'{horario}  \|  '

    # Envio de mensagem
    bot.reply_to(message, 'Ta bom\! Aqui est√° a lista dos √¥nibus de Ida de hoje\!')
    bot.send_message(message.chat.id, horariosVolta)

# Comando /bandejao
@bot.message_handler(commands=["bHoras"]) # Atribui√ß√£o do comando /bandejao √† fun√ß√£o
def bandejao(mensagem):

    """
    Essa fun√ß√£o:
    - Envia uma mensagem no chat com o 
    """

    # Horario atual (inteiro e formatado)
    horaAtual = int(datetime.fromtimestamp(mensagem.date).strftime('%H%M'))
    horaAtual_formated = datetime.fromtimestamp(mensagem.date).strftime('%H:%M')

    diaAtual = getCurrentDay(mensagem)

    horaAtual_time = datetime.strptime(horaAtual_formated, '%H:%M')

    # Envio da mensagem no chat
    bot.send_message(mensagem.chat.id,
f"""üçΩÔ∏èü•õüçé HOR√ÅRIOS DE REFEI√á√ÉO üçΩÔ∏èü•õüçé

Dia atual: {diaAtual}
Hor√°rio atual: {horaAtual_formated}
{printLocalidades(diaAtual, horaAtual, horaAtual_time)}    
""")

## Resposta √† mensagens desconhecidas ao bot 

def verify(mensagem):
    """
    Essa fun√ß√£o retorna True para a chegada de toda e qualquer mensagem.
    """
    return True

@bot.message_handler(func=verify) # Essa fun√ß√£o √© ativada sempre que receber True da fun√ß√£o verify()
def unknownCommand(mensagem):
    """
    Essa fun√ß√£o deve ser a √∫ltima de todas, porque ela √© ativada para QUALQUER mensagem.
    Ela √© respons√°vel por pegar todas as mensagens que n√£o ca√≠ram nas fun√ß√µes anteriores.
    """

    # Bot√µes
    helpButton = ReplyKeyboardMarkup(resize_keyboard=True) # Cria√ß√£o
    helpButton.add(KeyboardButton('/help'))

    # Envio de mensagem
    bot.reply_to(mensagem, 'Hmmm, eu n√£o conhe√ßo esse comando\.') 
    bot.send_message(mensagem.chat.id, 'Digite /help ou clique no bot√£o abaixo para ver os comandos dispon√≠veis\.', reply_markup=helpButton)

bot.polling()