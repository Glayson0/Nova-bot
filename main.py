"""
Nome do arquivo: main.py
Autor: Glayson Oliveira
Descri√ß√£o: Este √© o arquivo principal do bot. √â aqui que s√£o definidas as fun√ß√µes que ser√£o chamadas pelo
usu√°rio por meio das mensagens pelo Telegram, que s√£o checadas continuamente.
"""

# Importa√ß√µes de bibliotecas
import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime

from bandejao import *
from timeUtils import *
from onibus import *
from websiteRequest import *
from menus import *


# Fazer conex√£o com a API do bot do Telegram
CHAVE_API = "7141300367:AAHBHEelfnAig53EVxqq0oabZrRz15CjIJ8"
bot = telebot.TeleBot(CHAVE_API, parse_mode='MarkdownV2')

### Comandos intermedi√°rios: apenas auxiliam o usu√°rio a chegarem √†s funcionalidades do bot

## Geral

# Comando /start
@bot.message_handler(commands=["start"]) # Atribui√ß√£o do comando /start √† fun√ß√£o
def start(mensagem):
    """
    Envia uma mensagem de introdu√ß√£o no chat. Geralmente utilizada apenas na primeira
    intera√ß√£o do usu√°rio com o bot.

    :param mensagem: A mensagem enviada pelo usu√°rio.
    """

    # Texto da mensagem do bot
    startText = f"""
Eu me chamo Nova e sou um bot criado por alunos da Unicamp\!

Meu objetivo √© fornecer informa√ß√µes dos √¥nibus da moradia e dos restaurantes da Unicamp de forma r√°pida e f√°cil\.

Clique no bot√£o que apareceu no lugar do seu teclado ou digite /home para ver o menu principal\.
"""
    
    # Bot√µes
    startButton = ReplyKeyboardMarkup(resize_keyboard=True)  # Cria√ß√£o

    startButton.add(KeyboardButton('/home'))

    # Envio de mensagem
    bot.send_message(mensagem.chat.id, f'üëã Ol√°, {mensagem.chat.first_name}\! Como vai?')
    bot.send_message(mensagem.chat.id, startText, reply_markup=startButton)

@bot.message_handler(commands=["home"]) # Atribui√ß√£o do comando /start √† fun√ß√£o
def menuPrincipal(mensagem):
    """
    Envia uma mensagem no chat: um menu com bot√µes inline para acessar as os menus das funcionalidades do bot.

    :param mensagem: A mensagem enviada pelo usu√°rio.
    """

    bot.send_message(mensagem.chat.id, menuHome.text, reply_markup=menuHome.buttons)

# Comando /help
@bot.message_handler(commands=["help"])  # Atribui√ß√£o do comando /help √† fun√ß√£o
def help(mensagem):

    """
    Essa fun√ß√£o
    - envia uma mensagem no chat com 3 comandos principais para ajudar o usu√°rio.
    """

    # Texto da mensagem do bot
    helpText = """
\- /onibus: Ver comandos para os √¥nibus da moradia

\- /bandejao: Ver os comandos para o bandejao

\- /tudo: Listar todos os comandos
"""  

    # Bot√µes
    helpButtons = ReplyKeyboardMarkup(resize_keyboard=True) # Cria√ß√£o

    helpButtons.add(KeyboardButton('/onibus'))
    helpButtons.add(KeyboardButton('/bandejao'))
    helpButtons.add(KeyboardButton('/tudo'))

    # Envio de mensagem
    bot.reply_to(mensagem, 'Entendido\! Aqui est√° uma lista com os comandos principais:')
    bot.send_message(mensagem.chat.id, helpText, reply_markup=helpButtons)

# Comando /onibus
@bot.message_handler(commands=["onibus"]) # Atribui√ß√£o do comando /√¥nibus √† fun√ß√£o
def onibus(mensagem):

    """
    Essa fun√ß√£o
    - envia uma mensagem no chat listando todos os comandos relacionados com os √¥nibus da moradia.
    """

    # Envio de mensagem
    bot.reply_to(mensagem, 'Okay\! Aqui est√£o os comandos para os √¥nibus da moradia:')
    bot.send_message(mensagem.chat.id, menuOnibus.text, reply_markup=menuOnibus.buttons)

# Comando /bandej√£o
@bot.message_handler(commands=["bandejao"]) # Atribui√ß√£o do comando /bandejao √† fun√ß√£o
def bandejao(mensagem):

    """
    Essa fun√ß√£o
    - envia uma mensagem no chat listando todos os comandos relacionados com os restaurantes da Unicamp.
    """

    # Envio de mensagem
    bot.reply_to(mensagem, 'Certo\! Aqui est√£o os comandos para o bandej√£o:')
    bot.send_message(mensagem.chat.id, menuRestaurantes.text, reply_markup=menuRestaurantes.buttons)

# Comando /bCardapio
@bot.message_handler(commands=["bCardapio"]) # Atribui√ß√£o do comando /bCardapio √† fun√ß√£o
def bCardapio(mensagem, isCallback=False):

    """
    Essa fun√ß√£o envia uma mensagem no chat com as op√ß√µes de card√°pio (Tradicional e Vegano) para o usu√°rio escolher.
    """

    # Envio de mensagem
    if isCallback:
        bot.send_message(mensagem.chat.id, menuCardapios.text, reply_markup=menuCardapios.buttons)
    else:
        bot.reply_to(mensagem, 'Ta bom\! Qual card√°pio deseja ver?')
        bot.send_message(mensagem.chat.id, menuCardapios.text, reply_markup=menuCardapios.buttons)

### Comandos de funcionalidades: as funcionalidades de fato do bot

## √înibus

# Comando /oTodos
@bot.message_handler(commands=["oTodos"]) # Atribui√ß√£o do comando /oTodos √† fun√ß√£o
def oTodos(mensagem):

    """
    Essa fun√ß√£o envia uma foto no chat da tabela de hor√°rios dos √¥nibus da moradia
    """

    horariosOnibusFoto = 'https://i.pinimg.com/736x/8f/72/57/8f7257a0d878b4ce78543183ace8acf1.jpg' # URL da foto em um perfil do Pinterest

    # Envio de mensagem
    bot.send_message(mensagem.chat.id, 'Aqui est√° a foto com todos os hor√°rios dos √¥nibus da moradia:')
    bot.send_photo(mensagem.chat.id, horariosOnibusFoto)

# Comando /oProx
@bot.message_handler(commands=["oProx"]) # Atribui√ß√£o do comando /oProx √† fun√ß√£o
def oProx(mensagem):
    """
    Essa fun√ß√£o:
    - Pega o hor√°rio dos pr√≥ximos 2 √¥nibus de ida e volta cada com a fun√ß√£o nextBus();
    - Calcula a diferen√ßa de tempo entre o hor√°rio atual e o pr√≥ximo √¥nibus encontrado;
    - Envia uma mensagem com os hor√°rios dos pr√≥ximos 2 √¥nibus de ida e volta cada e o tempo faltante.
    """

    # Obten√ß√£o do tempo atual a partir da mensagem
    horaAtual = datetime.fromtimestamp(mensagem.date)
    diaAtual = getCurrentDay(mensagem)

    # Obten√ß√£o dos hor√°rios dos √¥nibus
    horarioOnibus_ida1, horarioOnibus_volta1 = nextBus(horaAtual, diaAtual)

    horarioOnibus_ida2, horarioOnibus_volta2 = nextBusFromBus(horarioOnibus_ida1, horarioOnibus_volta1, diaAtual)


    ## Diferen√ßa de tempo
        # Ida
    if horarioOnibus_ida1 != None:
        diffHorarios_ida1 = getTimeDifference(horarioOnibus_ida1, horaAtual)
    else:
        diffHorarios_ida1 = None

    if horarioOnibus_ida2 != None:
        diffHorarios_ida2 = getTimeDifference(horarioOnibus_ida2, horaAtual)
    else:
        diffHorarios_ida2 = None

        # Volta
    if horarioOnibus_volta1 != None:
        diffHorarios_volta1 = getTimeDifference(horarioOnibus_volta1, horaAtual)
    else:
        diffHorarios_volta1 = None

    if horarioOnibus_volta2 != None:
        diffHorarios_volta2 = getTimeDifference(horarioOnibus_volta2, horaAtual)
    else:
        diffHorarios_volta2 = None

    ## Texto de tempo faltante para cada √¥nibus
        # Ida
    tempoProxOnibus_ida1 = formatingDiffTime(horarioOnibus_ida1, diffHorarios_ida1)
    tempoProxOnibus_ida2 = formatingDiffTime(horarioOnibus_ida2, diffHorarios_ida2)
        # Volta
    tempoProxOnibus_volta1 = formatingDiffTime(horarioOnibus_volta1, diffHorarios_volta1)
    tempoProxOnibus_volta2 = formatingDiffTime(horarioOnibus_volta2, diffHorarios_volta2)

    ##  Texto do hor√°rio de cada √¥nibus
        # Ida
    if horarioOnibus_ida1 == None:
        outputProxOnibus_ida1 = f"""Acabaram os √¥nibus por hoje"""
    else:
        outputProxOnibus_ida1 = f"""{horarioOnibus_ida1} \({tempoProxOnibus_ida1}\)"""

    if horarioOnibus_ida2 == None:
        outputProxOnibus_ida2 = f"""Acabaram os √¥nibus por hoje"""
    else:
        outputProxOnibus_ida2 = f"""{horarioOnibus_ida2} \({tempoProxOnibus_ida2}\)"""
        # Volta
    if horarioOnibus_volta1 == None:
        outputProxOnibus_volta1 = f"""Acabaram os √¥nibus por hoje"""
    else:
        outputProxOnibus_volta1 = f"""{horarioOnibus_volta1} \({tempoProxOnibus_volta1}\)"""

    if horarioOnibus_volta2 == None:
        outputProxOnibus_volta2 = f"""Acabaram os √¥nibus por hoje"""
    else:
        outputProxOnibus_volta2 = f"""{horarioOnibus_volta2} \({tempoProxOnibus_volta2}\)"""

    # Texto da mensagem do bot
    proxOnibus_text = f"""
Ida \(Moradia \-\> Unicamp\):
01\) {outputProxOnibus_ida1}
02\) {outputProxOnibus_ida2}

Volta \(Unicamp \-\> Moradia\):
01\) {outputProxOnibus_volta1}
02\) {outputProxOnibus_volta2}
"""
    # Envio da mensagem no chat
    bot.reply_to(mensagem, "Claro\! Aqui est√£o os hor√°rios dos pr√≥ximos √¥nibus da moradia:")
    bot.send_message(mensagem.chat.id, proxOnibus_text)

# oTodosIda
@bot.message_handler(commands=["oTodosIda"]) # Atribui√ß√£o do comando /oTodosIda √† fun√ß√£o
def oTodosIda(message):

    """
    Essa fun√ß√£o envia uma mensagem no chat com uma lista de 3 colunas com
        - os hor√°rios de √¥nibus de Ida que j√° passaram tachados
        - o hor√°rio do pr√≥ximo √¥nibus de Ida em negrito
        - os hor√°rios de √¥nibus de Ida que ainda n√£o passaram
    """
    
    # Obten√ß√£o do tempo atual a partir da mensagem
    horaAtual = datetime.fromtimestamp(message.date)
    diaAtual = getCurrentDay(message)

    # Obten√ß√£o do hor√°rio do pr√≥ximo √¥nibus
    proxOnibus = nextBus(horaAtual, diaAtual, 0)

    ### Lista com todos os hor√°rios de Ida

    pos = 0

    ## Texto da mensagem do bot
    oTodosIdaText = ""

    # Dia √∫til
    if diaAtual in 'Segunda Ter√ßa Quarta Quinta Sexta':

        for horario in diaUtil_horariosIda:

            # √înibus que j√° passaram
            if strToTime(horario) < strToTime(proxOnibus): 
                pos += 1
                if pos % 3 == 0:
                    oTodosIdaText += f'~{horario}~\n'
                else:
                    oTodosIdaText += f'~{horario}~  \|  '
            
            # Pr√≥ximo √¥nibus
            elif strToTime(horario) == strToTime(proxOnibus):
                pos += 1
                if pos % 3 == 0:
                    oTodosIdaText += f'*{proxOnibus}*\n'
                else:
                    oTodosIdaText += f'*{proxOnibus}*  \|  '
            
            # √înibus que ainda n√£o passaram
            else:
                pos += 1
                if pos % 3 == 0:
                    oTodosIdaText += f'{horario}\n'
                else:
                    oTodosIdaText += f'{horario}  \|  '
    
    # Dia n√£o-√∫til
    else:

        for horario in diaNaoUtil_horariosIda:

            # √înibus que j√° passaram
            if strToTime(horario) < strToTime(proxOnibus): 
                pos += 1
                if pos % 3 == 0:
                    oTodosIdaText += f'~{horario}~\n'
                else:
                    oTodosIdaText += f'~{horario}~  \|  '
            
            # Pr√≥ximo √¥nibus
            elif strToTime(horario) == strToTime(proxOnibus):
                pos += 1
                if pos % 3 == 0:
                    oTodosIdaText += f'*{proxOnibus}*\n'
                else:
                    oTodosIdaText += f'*{proxOnibus}*  \|  '
            
            # √înibus que ainda n√£o passaram
            else:
                pos += 1
                if pos % 3 == 0:
                    oTodosIdaText += f'{horario}\n'
                else:
                    oTodosIdaText += f'{horario}  \|  '

    # Envio de mensagem
    bot.reply_to(message, 'Ta bom\! Aqui est√° a lista dos √¥nibus de Ida de hoje\!')
    bot.send_message(message.chat.id, oTodosIdaText)

# oTodosVolta
@bot.message_handler(commands=["oTodosVolta"]) # Atribui√ß√£o do comando /oTodosVolta √† fun√ß√£o
def oTodosVolta(message):

    """
    Essa fun√ß√£o envia uma mensagem no chat com uma lista de 3 colunas com
        - os hor√°rios de √¥nibus de Volta que j√° passaram tachados
        - o hor√°rio do pr√≥ximo √¥nibus de Volta em negrito
        - os hor√°rios de √¥nibus de Volta que ainda n√£o passaram
    """
    
    # Obten√ß√£o do tempo atual a partir da mensagem
    horaAtual = datetime.fromtimestamp(message.date)
    diaAtual = getCurrentDay(message)

    # Obten√ß√£o do hor√°rio do pr√≥ximo √¥nibus
    proxOnibus = nextBus(horaAtual, diaAtual, 0)

    ### Lista com todos os hor√°rios de Ida

    pos = 0

    ## Texto da mensagem do bot
    horariosVolta = ""

    # Dia √∫til
    if diaAtual in 'Segunda Ter√ßa Quarta Quinta Sexta':

        for horario in diaUtil_horariosVolta:

            # √înibus que j√° passaram
            if strToTime(horario) < strToTime(proxOnibus): 
                pos += 1
                if pos % 3 == 0:
                    horariosVolta += f'~{horario}~\n'
                else:
                    horariosVolta += f'~{horario}~  \|  '
            
            # Pr√≥ximo √¥nibus
            elif strToTime(horario) == strToTime(proxOnibus):
                pos += 1
                if pos % 3 == 0:
                    horariosVolta += f'*{proxOnibus}*\n'
                else:
                    horariosVolta += f'*{proxOnibus}*  \|  '
            
            # √înibus que ainda n√£o passaram
            else:
                pos += 1
                if pos % 3 == 0:
                    horariosVolta += f'{horario}\n'
                else:
                    horariosVolta += f'{horario}  \|  '
    
    # Dia n√£o-√∫til
    else:

        for horario in diaNaoUtil_horariosIda:

            # √înibus que j√° passaram
            if strToTime(horario) < strToTime(proxOnibus): 
                pos += 1
                if pos % 3 == 0:
                    horariosVolta += f'~{horario}~\n'
                else:
                    horariosVolta += f'~{horario}~  \|  '
            
            # Pr√≥ximo √¥nibus
            elif strToTime(horario) == strToTime(proxOnibus):
                pos += 1
                if pos % 3 == 0:
                    horariosVolta += f'*{proxOnibus}*\n'
                else:
                    horariosVolta += f'*{proxOnibus}*  \|  '
            
            # √înibus que ainda n√£o passaram
            else:
                pos += 1
                if pos % 3 == 0:
                    horariosVolta += f'{horario}\n'
                else:
                    horariosVolta += f'{horario}  \|  '

    # Envio de mensagem
    bot.reply_to(message, 'Ta bom\! Aqui est√° a lista dos √¥nibus de Ida de hoje\!')
    bot.send_message(message.chat.id, horariosVolta)

## Bandejao

# Comando /bTradicional
@bot.message_handler(commands=["bTradicional"]) # Atribui√ß√£o do comando /bandejao √† fun√ß√£o
def bTradicional(mensagem, isCallback=False):

    """
    Essa fun√ß√£o:
    - Envia uma mensagem no chat com o almo√ßo e janta
    """

    if not isCallback:
        # Obten√ß√£o do tempo atual a partir da mensagem
        tempoAtual = datetime.fromtimestamp(mensagem.date)
        diaAtual = getCurrentDay(mensagem)
    else:
        tempoAtual = datetime.now()
        diaAtual = getCurrentDay(mensagem, False)

    if diaAtual == "Domingo":
        almocoTradicional = webScrapingCardapio(tempoAtual, diaAtual)[0]
    
    # Texto da mensagem do bot  
        cardapioTradicionalText = f"""
    Card√°pio *Tradicional* ü•©

\-\> *Almo√ßo*
    *Prote√≠na*: {almocoTradicional.proteina}
    *Base*: {almocoTradicional.base}
    *Complemento*: {almocoTradicional.complemento}
    *Salada*: {almocoTradicional.salada}
    *Fruta*: {almocoTradicional.fruta}
    *Suco*: {almocoTradicional.suco}
    
\-\> *Jantar*
    N√£o tem jantar aos domingos\!
"""

    else:
        almocoTradicional = webScrapingCardapio(tempoAtual, diaAtual)[0]
        jantarTradicional = webScrapingCardapio(tempoAtual, diaAtual)[1]

        # Texto da mensagem do bot
        cardapioTradicionalText = f"""
    Card√°pio *Tradicional* ü•©

\-\> *Almo√ßo*
    *Prote√≠na*: {almocoTradicional.proteina}
    *Base*: {almocoTradicional.base}
    *Complemento*: {almocoTradicional.complemento}
    *Salada*: {almocoTradicional.salada}
    *Fruta*: {almocoTradicional.fruta}
    *Suco*: {almocoTradicional.suco}

\-\> *Jantar*
    *Prote√≠na*: {jantarTradicional.proteina}
    *Base*: {jantarTradicional.base}
    *Complemento*: {jantarTradicional.complemento}
    *Salada*: {jantarTradicional.salada}
    *Fruta*: {jantarTradicional.fruta}
    *Suco*: {jantarTradicional.suco}
    """

    # Envio da mensagem no chat
    bot.send_message(mensagem.chat.id, cardapioTradicionalText)

# Comando /bVegano
@bot.message_handler(commands=["bVegano"]) # Atribui√ß√£o do comando /bandejao √† fun√ß√£o
def bVegano(mensagem, isCallback=False):

    """
    Essa fun√ß√£o:
    - Envia uma mensagem no chat com o almo√ßo e janta
    """

    # Obten√ß√£o do tempo atual a partir da mensagem
    tempoAtual = datetime.fromtimestamp(mensagem.date)

    diaAtual = getCurrentDay(mensagem)

    if diaAtual == "Domingo":
        almocoVegano = webScrapingCardapio(tempoAtual, diaAtual)[0]
    
    # Texto da mensagem do bot
        cardapioVeganoText = f"""
    Card√°pio *Vegano* üíö

\-\> *Almo√ßo*
    *Prote√≠na*: {almocoVegano.proteina}
    *Base*: {almocoVegano.base}
    *Complemento*: {almocoVegano.complemento}
    *Salada*: {almocoVegano.salada}
    *Fruta*: {almocoVegano.fruta}
    *Suco*: {almocoVegano.suco}
    
\-\> *Jantar*
    N√£o tem jantar aos domingos\!
"""

    else:
        almocoVegano = webScrapingCardapio(tempoAtual, diaAtual)[0]
        jantarVegano = webScrapingCardapio(tempoAtual, diaAtual)[1]

        # Texto da mensagem do bot
        cardapioVeganoText = f"""
    Card√°pio *Vegano* üíö

\-\> *Almo√ßo*
    *Prote√≠na*: {almocoVegano.proteina}
    *Base*: {almocoVegano.base}
    *Complemento*: {almocoVegano.complemento}
    *Salada*: {almocoVegano.salada}
    *Fruta*: {almocoVegano.fruta}
    *Suco*: {almocoVegano.suco}

\-\> *Jantar*
    *Prote√≠na*: {jantarVegano.proteina}
    *Base*: {jantarVegano.base}
    *Complemento*: {jantarVegano.complemento}
    *Salada*: {jantarVegano.salada}
    *Fruta*: {jantarVegano.fruta}
    *Suco*: {jantarVegano.suco}
    """

    # Envio da mensagem no chat
    bot.send_message(mensagem.chat.id, cardapioVeganoText)

# Comando /ru
@bot.message_handler(commands=["ru"]) # Atribui√ß√£o do comando /bandejao √† fun√ß√£o
def bRS(mensagem, isCallback=False):
    
    # Obten√ß√£o do tempo atual a partir da mensagem
    horaAtual = datetime.fromtimestamp(mensagem.date)
    diaAtual = getCurrentDay(mensagem)

    ru = rest()[0]
    status(horaAtual, diaAtual, ru)

    ru = camRestaurante(horaAtual, ru)

    horarioOnibus_ida, _ = nextBus(horaAtual, diaAtual)

    if horarioOnibus_ida == None:
        horarioOnibus_ida = f'Acabaram os √¥nibus por hoje'
    

    textoRU = f"""
Restaurante Universit√°rio \(RU\)

    *Status:* {ru.status}
    {ru.refeicao}
    *Tempo:* {ru.tempo}

    Se estiver se planejando\.\.\.
    *Pr√≥ximo √¥nibus:* {horarioOnibus_ida}
"""

    bot.send_photo(mensagem.chat.id, ru.camera.imagem, caption=textoRU)

# Comando /ra
@bot.message_handler(commands=["ra"]) # Atribui√ß√£o do comando /bandejao √† fun√ß√£o
def bRA(mensagem, isCallback=False):
    
    # Obten√ß√£o do tempo atual a partir da mensagem
    horaAtual = datetime.fromtimestamp(mensagem.date)
    diaAtual = getCurrentDay(mensagem)

    ra = rest()[1]
    status(horaAtual, diaAtual, ra)

    ra = camRestaurante(horaAtual, ra)

    horarioOnibus_ida, _ = nextBus(horaAtual, diaAtual)

    if horarioOnibus_ida == None:
        horarioOnibus_ida = f'Acabaram os √¥nibus por hoje'

    textoRA = f"""
Restaurante Administrativo \(RA\)

    *Status:* {ra.status}
    {ra.refeicao}
    *Tempo:* {ra.tempo}

    Se estiver se planejando\.\.\.
    *Pr√≥ximo √¥nibus:* {horarioOnibus_ida}
"""

    bot.send_photo(mensagem.chat.id, ra.camera.imagem, caption=textoRA)

# Comando /rs
@bot.message_handler(commands=["rs"]) # Atribui√ß√£o do comando /bandejao √† fun√ß√£o
def bRU(mensagem, isCallback=False):
    
    # Obten√ß√£o do tempo atual a partir da mensagem
    horaAtual = datetime.fromtimestamp(mensagem.date)
    diaAtual = getCurrentDay(mensagem)

    rs = rest()[2]
    status(horaAtual, diaAtual, rs)

    rs = camRestaurante(horaAtual, rs)

    horarioOnibus_ida, _ = nextBus(horaAtual, diaAtual)

    if horarioOnibus_ida == None:
        horarioOnibus_ida = f'Acabaram os √¥nibus por hoje'

    textoRS = f"""
Restaurante Saturnino \(RS\)

    *Status:* {rs.status}
    {rs.refeicao}
    *Tempo:* {rs.tempo}

    Se estiver se planejando\.\.\.
    *Pr√≥ximo √¥nibus:* {horarioOnibus_ida}
"""

    bot.send_photo(mensagem.chat.id, rs.camera.imagem, caption=textoRS)

# Manipulador de callback para processar a sele√ß√£o do usu√°rio
@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    """
    Recebe todos os retornos dos bot√µes do tipo inline do bot.
    """

    # bot√£o Menu √¥nibus
    if call.data == 'menuOnibus':

        bot.edit_message_text(menuOnibus.text, call.message.chat.id, call.message.message_id, reply_markup=menuOnibus.buttons)

    # bot√£o Menu restaurantes
    elif call.data == 'menuRestaurantes':
        
        bot.edit_message_text(menuRestaurantes.text, call.message.chat.id, call.message.message_id, reply_markup=menuRestaurantes.buttons)

    # botao Menu principal (home)
    elif call.data == 'home':

        bot.edit_message_text(menuHome.text, call.message.chat.id, call.message.message_id, reply_markup=menuHome.buttons)

    # botao Menu principal (home)
    elif call.data == 'bCardapios':

        bCardapio(call.message, True)

    # botao Menu principal (home)
    elif call.data == 'bTradicional':

        bTradicional(call.message, True)

    elif call.data == 'bVegano':

        bVegano(call.message, True)
    
    elif call.data == 'ru':

        bRU(call.message, True)

    elif call.data == 'ra':

        bRA(call.message, True)

    elif call.data == 'rs':

        bRS(call.message, True)

## Resposta √† mensagens desconhecidas ao bot 

def verify(mensagem):
    """
    Essa fun√ß√£o retorna True para a chegada de toda e qualquer mensagem.
    """
    return True

@bot.message_handler(func=verify) # Essa fun√ß√£o √© ativada sempre que receber True da fun√ß√£o verify()
def unknownCommand(mensagem):
    """
    Essa fun√ß√£o deve ser a √∫ltima de todas, porque ela √© ativada para QUALQUER mensagem.
    Ela √© respons√°vel por pegar todas as mensagens que n√£o ca√≠ram nas fun√ß√µes anteriores.
    """

    # Bot√µes
    helpButton = ReplyKeyboardMarkup(resize_keyboard=True) # Cria√ß√£o
    helpButton.add(KeyboardButton('/home'))

    # Envio de mensagem
    bot.reply_to(mensagem, 'Hmmm, eu n√£o conhe√ßo esse comando\.') 
    bot.send_message(mensagem.chat.id, 'Digite /home ou clique no bot√£o abaixo para ver os comandos dispon√≠veis\.', reply_markup=helpButton)

bot.polling()